{"version":3,"sources":["components/fileUpload.js","components/convertType.js","containers/main.js","App.js","actions/index.js","reducers/index.js","index.js"],"names":["Url","process","FileUpload","selectedFunder","this","props","server","url","onload","res","iframe","document","createElement","id","Math","random","style","display","body","appendChild","src","className","allowMultiple","Component","ConvertType","changeFunder","handleChange","e","target","value","FormLabel","component","map","x","FormControlLabel","name","control","Radio","color","label","checked","onChange","Main","App","connect","state","dispatch","funder","type","payload","initialState","reducer","action","store","createStore","Reducer","applyMiddleware","thunk","ReactDOM","render","getElementById"],"mappings":"0RAGMA,G,MAAMC,mCAyBGC,E,iLAtBH,IACAC,EAAmBC,KAAKC,MAAxBF,eACFG,EAAS,CACbC,IAAI,GAAD,OAAKP,EAAL,oBAAoBG,GACvBF,QAAS,CACPO,OAAQ,SAACC,GACP,IAAIC,EAASC,SAASC,cAAc,UACpCF,EAAOG,GAAK,SAAWC,KAAKC,SAC5BL,EAAOM,MAAMC,QAAU,OACvBN,SAASO,KAAKC,YAAYT,GAC1BA,EAAOU,IAAP,UAAgBpB,EAAhB,qBAAgCS,EAAhC,WAIN,OACE,yBAAKY,UAAU,mBACb,kBAAC,WAAD,CAAUC,eAAe,EAAMhB,OAAQA,S,GAjBtBiB,a,wBCsBVC,E,iLArBD,IAAD,EACoCpB,KAAKC,MAAtCoB,EADH,EACGA,aAActB,EADjB,EACiBA,eAEhBuB,EAAe,SAAAC,GACjBF,EAAaE,EAAEC,OAAOC,QAE1B,OACI,yBAAKR,UAAU,cAEX,kBAACS,EAAA,EAAD,CAAWC,UAAU,UAArB,kCACA,6BARQ,CAAC,MAAO,MAAO,SASVC,KAAI,SAAAC,GACT,OAAQ,kBAACC,EAAA,EAAD,CAAkBC,KAAK,SAASN,MAAOI,EAAGG,QAAS,kBAACC,EAAA,EAAD,CAAOC,MAAM,YACpEC,MAAON,EAAGO,QAASP,IAAM9B,EAAgBsC,SAAUf,a,GAdrDH,aCYXmB,E,iLAZP,OACI,yBAAKrB,UAAU,iBACX,6CACA,wEACA,kBAAC,EAAgBjB,KAAKC,OACtB,kBAAC,EAAeD,KAAKC,Y,GAPlBkB,a,QCIboB,E,iLAEF,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAASjB,KAAKC,Y,GAJLkB,aAqBHqB,eAXS,SAACC,GACvB,MAAO,CACL1C,eAAgB0C,EAAM1C,mBAMC,SAAC2C,GAC1B,MAAO,CAAErB,aAAc,SAACsB,GAAD,OAAYD,EC1BhB,SAAAC,GACjB,MAAQ,CACJC,KAAM,gBACNC,QAAS,CAAEF,WDuB2BtB,CAAasB,QAE5CH,CAA6CD,G,gBE5BtDO,EAAe,CACjB/C,eAAgB,OAYLgD,EAVC,WAAmC,IAAlCN,EAAiC,uDAAzBK,EAAcE,EAAW,uCAC9C,OAAQA,EAAOJ,MACX,IAAK,gBACD,OAAO,eAAKH,EAAZ,CAAmB1C,eAAgBiD,EAAOH,QAAQF,SACtD,QACI,OAAO,eAAKF,K,QCElBQ,EAAQC,YAAYC,EAASC,YAAgBC,MACnDC,IAASC,OAAO,kBAAC,IAAD,CAAUN,MAAOA,GAAO,kBAAC,EAAD,OAAoB1C,SAASiD,eAAe,W","file":"static/js/main.cdaecb56.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { FilePond } from \"react-filepond\";\nimport \"filepond/dist/filepond.min.css\";\nconst Url = process.env.PUBLIC_URL;\n\nclass FileUpload extends Component {\n  render() {\n    const { selectedFunder } = this.props;\n    const server = {\n      url: `${Url}/convert/${selectedFunder}`,\n      process: {\n        onload: (res) => {\n          var iframe = document.createElement(\"iframe\");\n          iframe.id = \"iframe\" + Math.random();\n          iframe.style.display = \"none\";\n          document.body.appendChild(iframe);\n          iframe.src = `${Url}/download/${res}.pdf`;\n        },\n      },\n    };\n    return (\n      <div className=\"uploadContainer\">\n        <FilePond allowMultiple={true} server={server} />\n      </div>\n    );\n  }\n}\n\nexport default FileUpload;\n","import React, { Component } from \"react\";\nimport Radio from '@material-ui/core/Radio';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nclass ConvertType extends Component {\n    render() {\n        const { changeFunder, selectedFunder } = this.props\n        const funders = ['FWO', 'ERC', 'H2020']\n        const handleChange = e => {\n            changeFunder(e.target.value)\n        }\n        return (\n            <div className=\"funderType\">\n\n                <FormLabel component=\"legend\">Convert from ELIXIR format to:</FormLabel>\n                <div>\n                    {funders.map(x => {\n                        return (<FormControlLabel name=\"funder\" value={x} control={<Radio color=\"primary\" />}\n                            label={x} checked={x === selectedFunder} onChange={handleChange} />)\n                    })}</div>\n            </div>\n        )\n    }\n\n}\n\nexport default ConvertType","import React, { Component } from \"react\";\nimport FileUpload from '../components/fileUpload'\nimport ConvertType from '../components/convertType'\nclass Main extends Component {\n    render() {\n        return (\n            <div className=\"mainContainer\">\n                <h1>DMP Converter</h1>\n                <small>Select the source file(s) to convert.</small>\n                <ConvertType {...this.props} />\n                <FileUpload {...this.props} />\n            </div>\n        )\n    }\n\n}\n\nexport default Main","import React, { Component } from 'react';\nimport './App.css';\nimport Main from './containers/main'\nimport { connect } from 'react-redux'\nimport { changeFunder } from './actions/index'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Main {...this.props} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    selectedFunder: state.selectedFunder\n  }\n}\n\n\n\nconst mapDispatchToProps = (dispatch) => {\n  return { changeFunder: (funder) => dispatch(changeFunder(funder)) }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const changeFunder = funder => {\n    return ({\n        type: 'CHANGE_FUNDER',\n        payload: { funder }\n    })\n}\n\nexport { changeFunder }","const initialState = {\n    selectedFunder: 'FWO'\n}\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case \"CHANGE_FUNDER\":\n            return { ...state, selectedFunder: action.payload.funder }\n        default:\n            return { ...state }\n    }\n}\n\n\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport Reducer from './reducers/index'\nimport thunk from 'redux-thunk';\n\nconst store = createStore(Reducer, applyMiddleware(thunk))\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}